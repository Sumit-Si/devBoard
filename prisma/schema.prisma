// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  INPROGRESS
  DONE
}

enum TaskPriority {
  EASY
  MEDIUM
  HIGH
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  image     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// Relations
  apiKeys        ApiKeys[]
  projects       Projects[]
  assignedUser   Tasks[]  @relation("TaskAssignedTo")
  assignedByUser Tasks[]  @relation("TaskAssignedBy")
}

model ApiKeys {
  id String @id @default(uuid())
  key String @unique
  createdBy String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Projects {
  id String @id @default(uuid())
  name String
  description String?
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Tasks[]
  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

}

model Tasks {
  id String @id @default(uuid())
  title String
  projectId String
  assignedTo String
  assignedBy String
  description String?
  status TaskStatus @default(TODO)
  priority TaskPriority @default(EASY)
  attachments String[]
  createdAt DateTime @default(now())
  endAt DateTime? @default(now())
  updatedAt DateTime @updatedAt

   // Relations
  project         Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedUser    User     @relation("TaskAssignedTo", fields: [assignedTo], references: [id], onDelete: Cascade)
  assignedByUser  User     @relation("TaskAssignedBy", fields: [assignedBy], references: [id], onDelete: Cascade)
}
