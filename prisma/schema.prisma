// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
}

enum TaskStatus {
  TODO
  INPROGRESS
  DONE
}

enum TaskPriority {
  EASY
  MEDIUM
  HIGH
}

enum CollabRoles {
  VIEWER
  EDITOR
  OWNER
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  image        String?
  password     String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  apiKeys        ApiKey[]
  projects       Project[]
  assignedUser   Task[]    @relation("TaskAssignedTo")
  assignedByUser Task[]    @relation("TaskAssignedBy")
  collaborators Collaborator[]

  @@map("users")
}

model ApiKey {
  id        String       @id @default(uuid())
  key       String       @unique
  createdBy String
  status    ApiKeyStatus @default(ACTIVE)
  expiresAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  tasks Task[]
  user  User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  collaborators Collaborator[]

  @@map("projects")
}

model Task {
  id          String       @id @default(uuid())
  title       String
  projectId   String
  assignedTo  String
  assignedBy  String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(EASY)
  attachments String[]

  dueAt       DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedUser   User     @relation("TaskAssignedTo", fields: [assignedTo], references: [id], onDelete: Cascade)
  assignedByUser User     @relation("TaskAssignedBy", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Collaborator {
  id String @id @default(uuid())
  userId String
  projectId String
  role  CollabRoles @default(VIEWER)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  project Project @relation(fields: [projectId],references: [id],onDelete: Cascade)

  @@map("collaborators")
}
